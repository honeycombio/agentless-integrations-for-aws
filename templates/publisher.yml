AWSTemplateFormatVersion: "2010-09-09"
Description: This template builds the necessary lambda infra for the Honeycomb Publisher.
Parameters:
  HoneycombWriteKey:
    Type: String
    Description: Your Honeycomb write key. If KMSKeyId is set, this should be a Cyphertext Blob from KMS.
  KMSKeyId:
    Type: String
    Default: ''
    Description: 'KMS Key ID used to encrypt your Honeycomb write key (ex: a80d80aa-19b5-486a-a163-a4502b5555)'
  HoneycombAPIHost:
    Type: String
    Default: https://api.honeycomb.io
    Description: Optional. Altenative Honeycomb API host.
  HoneycombDataset:
    Type: String
    Default: lambda-events
    Description: Catch-all dataset used if upstream events did not include a dataset
  LogGroupName:
    Type: String
    Description: The name of the AWS Cloudwatch Log Group to subscribe to
  LogGroupName1:
    Type: String
    Default: ''
    Description: Additional log group to subscribe to
  LogGroupName2:
    Type: String
    Default: ''
    Description: Additional log group to subscribe to
  LogGroupName3:
    Type: String
    Default: ''
    Description: Additional log group to subscribe to
  LogGroupName4:
    Type: String
    Default: ''
    Description: Additional log group to subscribe to
  LogGroupName5:
    Type: String
    Default: ''
    Description: Additional log group to subscribe to
  FilterPattern:
    Type: String
    Default: ''
    Description: The filtering expressions that restrict which cloudwatch log lines get sent
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Required Parameters
        Parameters:
          - LogGroupName
          - HoneycombWriteKey
          - HoneycombDataset
      - Label:
          default: Optional Parameters
        Parameters:
          - LogGroupName1
          - LogGroupName2
          - LogGroupName3
          - LogGroupName4
          - LogGroupName5
          - KMSKeyId
          - FilterPattern
          - HoneycombAPIHost
Conditions:
  EncryptionEnabled: !Not [!Equals [!Ref KMSKeyId, '']]
  LogGroup1Enabled: !Not [!Equals [!Ref LogGroupName1, '']]
  LogGroup2Enabled: !Not [!Equals [!Ref LogGroupName2, '']]
  LogGroup3Enabled: !Not [!Equals [!Ref LogGroupName3, '']]
  LogGroup4Enabled: !Not [!Equals [!Ref LogGroupName4, '']]
  LogGroup5Enabled: !Not [!Equals [!Ref LogGroupName5, '']]
Resources:
  PublisherLambdaHandler:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: honeycomb-builds
        S3Key: honeycombio/integrations-for-aws/LATEST/ingest-handlers.zip
      Description: Lambda function for publishing asynchronous events from Lambda
      Environment:
        Variables:
          HONEYCOMB_WRITE_KEY: !Ref HoneycombWriteKey
          KMS_KEY_ID: !Ref KMSKeyId
          API_HOST: !Ref HoneycombAPIHost
          DATASET: !Ref HoneycombDataset
      FunctionName:
        "Fn::Join":
          - '-'
          -
            - PublisherLambdaHandler
            - !Ref "AWS::StackName"
      Handler: publisher
      MemorySize: 128
      Role:
        "Fn::GetAtt":
          - LambdaIAMRole
          - Arn
      Runtime: go1.x
      Timeout: 10
  ExecutePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        "Fn::GetAtt":
          - PublisherLambdaHandler
          - Arn
      Principal: 'logs.amazonaws.com'
  CloudwatchSubscriptionFilter:
    Type: "AWS::Logs::SubscriptionFilter"
    Properties:
      DestinationArn:
        "Fn::GetAtt":
          - PublisherLambdaHandler
          - Arn
      LogGroupName: !Ref LogGroupName
      FilterPattern: !Ref FilterPattern
    DependsOn: ExecutePermission
  # hacky work-around to allow multiple optional inputs for log group name
  # clearly hitting some limitations of the Cloudformation workflow here
  CloudwatchSubscriptionFilter1:
    Type: "AWS::Logs::SubscriptionFilter"
    Condition: LogGroup1Enabled
    Properties:
      DestinationArn:
        "Fn::GetAtt":
          - PublisherLambdaHandler
          - Arn
      LogGroupName: !Ref LogGroupName1
      FilterPattern: !Ref FilterPattern
    DependsOn: ExecutePermission
  CloudwatchSubscriptionFilter2:
    Type: "AWS::Logs::SubscriptionFilter"
    Condition: LogGroup2Enabled
    Properties:
      DestinationArn:
        "Fn::GetAtt":
          - PublisherLambdaHandler
          - Arn
      LogGroupName: !Ref LogGroupName2
      FilterPattern: !Ref FilterPattern
    DependsOn: ExecutePermission
  CloudwatchSubscriptionFilter3:
    Type: "AWS::Logs::SubscriptionFilter"
    Condition: LogGroup3Enabled
    Properties:
      DestinationArn:
        "Fn::GetAtt":
          - PublisherLambdaHandler
          - Arn
      LogGroupName: !Ref LogGroupName3
      FilterPattern: !Ref FilterPattern
    DependsOn: ExecutePermission
  CloudwatchSubscriptionFilter4:
    Type: "AWS::Logs::SubscriptionFilter"
    Condition: LogGroup4Enabled
    Properties:
      DestinationArn:
        "Fn::GetAtt":
          - PublisherLambdaHandler
          - Arn
      LogGroupName: !Ref LogGroupName4
      FilterPattern: !Ref FilterPattern
    DependsOn: ExecutePermission
  CloudwatchSubscriptionFilter5:
    Type: "AWS::Logs::SubscriptionFilter"
    Condition: LogGroup5Enabled
    Properties:
      DestinationArn:
        "Fn::GetAtt":
          - PublisherLambdaHandler
          - Arn
      LogGroupName: !Ref LogGroupName5
      FilterPattern: !Ref FilterPattern
    DependsOn: ExecutePermission
  LambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
  LambdaLogPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "lambda-create-log"
      Roles:
          - Ref: LambdaIAMRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: 'arn:aws:logs:*:*:*'
  LambdaKMSPolicy:
    Type: "AWS::IAM::Policy"
    Condition: EncryptionEnabled
    Properties:
      PolicyName: "lambda-kms-decrypt"
      Roles:
          - Ref: LambdaIAMRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              "Fn::Join":
                - ''
                -
                  - arn:aws:kms:*:*:key/
                  - !Ref KMSKeyId
