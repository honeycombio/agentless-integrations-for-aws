AWSTemplateFormatVersion: "2010-09-09"
Description: This template builds the necessary lambda infra to send vpc flow logs to honeycomb
Parameters:
  Environment:
    Type: String
    Default: ''
    Description: Name of environment. This will be included in log events sent to Honeycomb.
  HoneycombWriteKey:
    Type: String
    Description: Your Honeycomb write key. If KMSKeyId is set, this should be a Cyphertext Blob from KMS.
  KMSKeyId:
    Type: String
    Default: ''
    Description: 'KMS Key ID used to encrypt your Honeycomb write key (ex: a80d80aa-19b5-486a-a163-a4502b5555)'
  HoneycombAPIHost:
    Type: String
    Default: https://api.honeycomb.io
    Description: Altenative Honeycomb API host.
  HoneycombDataset:
    Type: String
    Default: vpc-flow-logs
    Description: Target honeycomb dataset
  HoneycombSampleRate:
    Type: Number
    Default: 1
    Description: Sample rate - vpc flow logs generate a lot of data. Sampling is highly recommended.
  LogGroupName:
    Type: String
    Description: The name of the AWS Cloudwatch Log Group to subscribe to
  FilterPattern:
    Type: String
    Default: ''
    Description: The filtering expressions that restrict which cloudwatch log lines get sent
  FilterFields:
    Type: String
    Description: Comma-separated simple strings to specify which field names to remove from events
    Default: ''
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Required Parameters
        Parameters:
          - LogGroupName
          - HoneycombWriteKey
          - HoneycombDataset
          - HoneycombSampleRate
      - Label:
          default: Optional Parameters
        Parameters:
          - FilterFields
          - Environment
          - KMSKeyId
          - FilterPattern
          - HoneycombAPIHost
Conditions:
  EncryptionEnabled: !Not [!Equals [!Ref KMSKeyId, '']]
Resources:
  CloudwatchLambdaHandler:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket:
          "Fn::Join":
          - '-'
          -
            - honeycomb-integrations
            - !Ref "AWS::Region"
        S3Key: agentless-integrations-for-aws/LATEST/ingest-handlers.zip
      Description: Lambda function for sending cloudwatch logs to Honeycomb
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          PARSER_TYPE: vpc-flow
          HONEYCOMB_WRITE_KEY: !Ref HoneycombWriteKey
          KMS_KEY_ID: !Ref KMSKeyId
          API_HOST: !Ref HoneycombAPIHost
          DATASET: !Ref HoneycombDataset
          SAMPLE_RATE: !Ref HoneycombSampleRate
          TIME_FIELD_NAME: 'start_time'
          TIME_FIELD_FORMAT: '%s(%L)?'
          FILTER_FIELDS: !Ref FilterFields
      FunctionName:
        "Fn::Join":
          - '-'
          -
            - CloudwatchLambdaHandler
            - !Ref "AWS::StackName"
      Handler: cloudwatch-handler
      MemorySize: 128
      Role:
        "Fn::GetAtt":
          - LambdaIAMRole
          - Arn
      Runtime: go1.x
      Timeout: 10
  ExecutePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        "Fn::GetAtt":
          - CloudwatchLambdaHandler
          - Arn
      Principal: 'logs.amazonaws.com'
  CloudwatchSubscriptionFilter:
    Type: "AWS::Logs::SubscriptionFilter"
    Properties:
      DestinationArn:
        "Fn::GetAtt":
          - CloudwatchLambdaHandler
          - Arn
      LogGroupName: !Ref LogGroupName
      FilterPattern: !Ref FilterPattern
    DependsOn: ExecutePermission
  LambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
  LambdaLogPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "lambda-create-log"
      Roles:
          - Ref: LambdaIAMRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: 'arn:aws:logs:*:*:*'
  LambdaKMSPolicy:
    Type: "AWS::IAM::Policy"
    Condition: EncryptionEnabled
    Properties:
      PolicyName: "lambda-kms-decrypt"
      Roles:
          - Ref: LambdaIAMRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              "Fn::Join":
                - ''
                -
                  - arn:aws:kms:*:*:key/
                  - !Ref KMSKeyId
